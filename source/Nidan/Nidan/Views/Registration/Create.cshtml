@using Nidan.Extensions
@using Nidan.Models
@model Nidan.Models.RegistrationViewModel

@{
    ViewBag.Title = "Create Registration";
}
<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="x_title">
                <h2><button type="button" class="btn btn-round btn-info btn-lg"><i class="fa fa-user"></i> &nbsp;@string.Format("{0} {1} {2} {3}", @Model.Enquiry.Title, @Model.Enquiry.FirstName, @Model.Enquiry.MiddleName, @Model.Enquiry.LastName)</button>  Enquiry Details<small></small></h2>
                <div class="clearfix"></div>
            </div>
            <div class="x_content">

                @using (Html.BeginForm())
                {
                    <div class="form-horizontal">
                        @if (ViewContext.ViewData.ModelState.Any(x => x.Key == ""))
                        {
                            <div class="row">
                                <div class="col-md-6 col-sm-12 col-xs-12 col-md-offset-3">
                                    @Html.ValidationSummary(false, null, new { @class = "row alert alert-error" })
                                </div>
                            </div>
                        }

                        <div class="row">
                            <div class="col-lg-12">
                                <div class="col-lg-6">
                                    <div class="input-group">
                                        <span class="input-group-btn">
                                            <button type="button" class="btn btn-dark">Mobile</button>
                                        </span>
                                        <input type="text" disabled="disabled" value="@Model.Enquiry.Mobile" class="form-control col-lg-4">
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="input-group">
                                        <span class="input-group-btn">
                                            <button type="button" class="btn btn-dark">Email</button>
                                        </span>
                                        <input type="text" disabled="disabled" value="@Model.Enquiry.EmailId" class="form-control col-lg-4">
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="col-lg-6">
                                    <div class="input-group">
                                        <span class="input-group-btn">
                                            <button type="button" class="btn btn-dark">Interested Scheme</button>
                                        </span>
                                        <input type="text" disabled="disabled" value="@Model.Enquiry.Scheme.Name" class="form-control col-lg-4">
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="input-group">
                                        <span class="input-group-btn">
                                            <button type="button" class="btn btn-dark">Interested Sector</button>
                                        </span>
                                        <input type="text" disabled="disabled" value="@Model.Enquiry.Sector.Name" class="form-control col-lg-4">
                                    </div>
                                </div>
                            </div>

                            @if (Model.Enquiry.IsCounsellingDone == true)
                            {
                                <div class="col-lg-12">
                                    <div class="col-lg-12">
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-dark">Course Offered</button>
                                            </span>
                                            @foreach (var course in Model.CounsellingCourse)
                                            {
                                                <input type="text" disabled="disabled" value="@course.Text" class="form-control col-lg-4">
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="col-lg-12">
                                    <div class="col-lg-12">
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-dark">Interested Course(s)</button>
                                            </span>
                                            @foreach (var course in Model.Courses)
                                            {
                                                <input type="text" disabled="disabled" value="@course.Text" class="form-control col-lg-4">
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="x_title">
                <h2>Create Registration <small></small></h2>
                <div class="clearfix"></div>
            </div>
            <div class="x_content">
                @using (Html.BeginForm())
                {
                    @Html.HiddenFor(model => model.Registration.CourseInstallment.Name)
                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
                        @if (ViewContext.ViewData.ModelState.Any(x => x.Key == ""))
                        {
                            <div class="row">
                                <div class="col-md-6 col-sm-12 col-xs-12 col-md-offset-3">
                                    @Html.ValidationSummary(false, null, new { @class = "row alert alert-error" })
                                </div>
                            </div>
                        }
                        @Html.Partial("_Registration", Model)
                    </div>
                    <div class="col-md-6 col-sm-12 col-xs-12 col-md-offset-3">
                        <div class="form-group">
                            <div class="pull-right">
                                <button id="btn_submit" type="submit" class="btn btn-success">Pay and Register</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div>
    <a href="@Url.Action("Index")" class="btn btn-primary" role="button">
        <span class="fa fa-chevron-left"></span>&nbsp;Back to list
    </a>
</div>
@section scripts
{
    <script>
        $('#btn_submit').attr('disabled', true);
        //Submit Button Blur after Click
        $(document).on('submit', 'form', function () {
            var buttons = $(this).find('[type="submit"]');
            if ($(this).valid()) {
                buttons.each(function (btn) {
                    $(buttons[btn]).prop('disabled', true);
                });
            } else {
                buttons.each(function (btn) {
                    $(buttons[btn]).prop('disabled', false);
                });
            }
        });

        //Registration Amount Validation
        $("#Registration_CandidateFee_PaidAmount").keyup(function() {
            var registrationFee = $("#Registration_CandidateFee_PaidAmount").val();
            if (registrationFee < 1000) {
                $('#btn_submit').attr('disabled', true);
            } else {
                $('#btn_submit').attr('disabled', false);
            }
        });

        $("#RegistrationPaymentReceipt_Fees").val("");

        $('.bank-details-textbox').hide();
        $("#Registration_CandidateFee_PaymentModeId").change(function () {
            if ($('#Registration_CandidateFee_PaymentModeId :selected').text() == "Cheque") {
                $('.bank-details-textbox').show();
                $("#Registration_CandidateFee_BankName").val("");
                $("#Registration_CandidateFee_ChequeNo").val("");
            } else {
                $('.bank-details-textbox').hide();
            }
        });

        $('input[type=radio]').click(function () {
            if (this.previous) {
                this.checked = false;
            }
            this.previous = this.checked;
        });

        $(function () {
            $("#RegistrationPaymentReceipt_FollowUpDate").val("");
            var daterangepickerOptions = {
                autoApply: true,
                singleDatePicker: true,
                showDropdowns: true,
                showCustomRangeLabel: false,
                opens: 'left',
                //minDate: moment(),
                //maxDate: moment().add('2', 'days').format('DD MMMM YYYY'),
                onSelect: function () {
                    selectedDate = moment().format('DD MMMM YYYY');
                },
                locale: {
                    "format": "DD MMMM YYYY"
                }
            };

            jQuery(function () {
                jQuery(".date").daterangepicker(daterangepickerOptions);
                $('#GeneratedDate').val(moment().format('DD MMMM YYYY'));
                $(".generated .date").on('apply.daterangepicker', function (ev, picker) {
                    $(this).val(picker.startDate.format('DD MMMM YYYY'));
                });
            });
        });
        
        //-----------------------------------------

        //onkeypress = "return onlyNumbers(this.value)", onkeyup= "NumToWord(this.value,'divDisplayWords')"  Registration_CandidateFee_PaidAmount

        $('#Registration_CandidateFee_PaidAmount')
            .keypress(function(evt) {
                var e = event || evt; // For trans-browser compatibility
                var charCode = e.which || e.keyCode;

                if (charCode > 31 && (charCode < 48 || charCode > 57))
                    return false;
                return true;


            });

        //function onlyNumbers(evt) {
        //    var e = event || evt; // For trans-browser compatibility
        //    var charCode = e.which || e.keyCode;

        //    if (charCode > 31 && (charCode < 48 || charCode > 57))
        //        return false;
        //    return true;
        //}

        $('#Registration_CandidateFee_PaidAmount')
            .keyup(function () {
                var inputNumber = $('#Registration_CandidateFee_PaidAmount').val();
                var str = new String(inputNumber)
                var splt = str.split("");
                var rev = splt.reverse();
                var once = ['Zero', ' One', ' Two', ' Three', ' Four', ' Five', ' Six', ' Seven', ' Eight', ' Nine'];
                var twos = ['Ten', ' Eleven', ' Twelve', ' Thirteen', ' Fourteen', ' Fifteen', ' Sixteen', ' Seventeen', ' Eighteen', ' Nineteen'];
                var tens = ['', 'Ten', ' Twenty', ' Thirty', ' Forty', ' Fifty', ' Sixty', ' Seventy', ' Eighty', ' Ninety'];

                numLength = rev.length;
                var word = new Array();
                var j = 0;

                for (i = 0; i < numLength; i++) {
                    switch (i) {

                    case 0:
                        if ((rev[i] == 0) || (rev[i + 1] == 1)) {
                            word[j] = '';
                        }
                        else {
                            word[j] = '' + once[rev[i]];
                        }
                        word[j] = word[j];
                        break;

                    case 1:
                        aboveTens();
                        break;

                    case 2:
                        if (rev[i] == 0) {
                            word[j] = '';
                        }
                        else if ((rev[i - 1] == 0) || (rev[i - 2] == 0)) {
                            word[j] = once[rev[i]] + " Hundred ";
                        }
                        else {
                            word[j] = once[rev[i]] + " Hundred and";
                        }
                        break;

                    case 3:
                        if (rev[i] == 0 || rev[i + 1] == 1) {
                            word[j] = '';
                        }
                        else {
                            word[j] = once[rev[i]];
                        }
                        if ((rev[i + 1] != 0) || (rev[i] > 0)) {
                            word[j] = word[j] + " Thousand";
                        }
                        break;


                    case 4:
                        aboveTens();
                        break;

                    case 5:
                        if ((rev[i] == 0) || (rev[i + 1] == 1)) {
                            word[j] = '';
                        }
                        else {
                            word[j] = once[rev[i]];
                        }
                        if (rev[i + 1] !== '0' || rev[i] > '0') {
                            word[j] = word[j] + " Lakh";
                        }

                        break;

                    case 6:
                        aboveTens();
                        break;

                    case 7:
                        if ((rev[i] == 0) || (rev[i + 1] == 1)) {
                            word[j] = '';
                        }
                        else {
                            word[j] = once[rev[i]];
                        }
                        if (rev[i + 1] !== '0' || rev[i] > '0') {
                            word[j] = word[j] + " Crore";
                        }
                        break;

                    case 8:
                        aboveTens();
                        break;

                    //            This is optional.

                    //            case 9:
                    //                if ((rev[i] == 0) || (rev[i + 1] == 1)) {
                    //                    word[j] = '';
                    //                }
                    //                else {
                    //                    word[j] = once[rev[i]];
                    //                }
                    //                if (rev[i + 1] !== '0' || rev[i] > '0') {
                    //                    word[j] = word[j] + " Arab";
                    //                }
                    //                break;

                    //            case 10:
                    //                aboveTens();
                    //                break;

                    default: break;
                    }
                    j++;
                }

                function aboveTens() {
                    if (rev[i] == 0) { word[j] = ''; }
                    else if (rev[i] == 1) { word[j] = twos[rev[i - 1]]; }
                    else { word[j] = tens[rev[i]]; }
                }

                word.reverse();
                var finalOutput = '';
                for (i = 0; i < numLength; i++) {
                    finalOutput = finalOutput + word[i];
                }
                $('#divDisplayWords').html(finalOutput + " Only");

            });
        
        //GetCourseInstallmentsByCourseId($('#Registration_CourseId :selected').val());
        //GetCourseInstallment($('#Registration_CourseInstallmentId :selected').val());
        $('#Registration_CourseId').change(function () {
            var courseId = $('#Registration_CourseId :selected').val();
            GetCourseInstallmentsByCourseId(courseId);
            $("#IsTotalAmountDiscountDiv").hide();
        });
        $('#Registration_CourseInstallmentId').change(function () {
            var courseInstallmentId = $('#Registration_CourseInstallmentId :selected').val();
            GetCourseInstallment(courseInstallmentId);
            $("#paymentMethodDiv").show();
        });

        $('#Registration_CandidateInstallment_IsTotalAmountDiscount').change(function () {
            if ($(this).is(":checked")) {
                $("#overrideFeeDiv").show();
                //$("#paymentMethodDiv").show();
            } else {
                $("#overrideFeeDiv").hide();
                //$("#paymentMethodDiv").show();
            }

        });
        $("#overrideFeeDiv").hide();
        $("#courseInstallmentDiv").hide();
        $("#downPaymentDiv").hide();
        $("#IsTotalAmountDiscountDiv").hide();
        $("#paymentMethodDiv").hide();
        $("Registration.CandidateInstallment.PaymentMethodMonthly").change((function () {
            alert($("Registration_CandidateInstallment_PaymentMethod").val());
        }));
        $('input:radio[name="Registration.CandidateInstallment.PaymentMethod"]').change(
            function () {
                if (this.checked && this.value == 'MonthlyInstallment') {
                    $("#downPaymentDiv").show();
                } else {
                    $("#downPaymentDiv").hide();
                }
            });

        function GetCourseInstallmentsByCourseId(courseId) {
            $.ajax({
                url: '/Registration/GetCourseInstallmentByCourseId',
                type: 'POST',
                data: JSON.stringify({ courseId: courseId }),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                error: function (xhr) {
                    alert('Error: ' + xhr.statusText);
                },
                success: function (result) {
                    $("#Registration_CourseInstallmentId").empty();
                    $("#Registration_CourseInstallmentId").append($("<option></option>").val(0).html("Select Course Installment"));
                    $.each(result, function (key, value) {
                        $("#Registration_CourseInstallmentId").append($("<option></option>").val(value.CourseInstallmentId).html(value.Name));
                    });
                    if (result.length == 0) {
                        $("#courseInstallmentDiv").hide();
                    }
                },
                async: true,
                processData: false
            });
        }

        function GetCourseInstallment(courseInstallmentId) {
            $.ajax({
                url: '/Registration/GetCourseInstallment',
                type: 'POST',
                data: JSON.stringify({ courseInstallmentId: courseInstallmentId }),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                error: function (xhr) {
                    alert('Error: ' + xhr.statusText);
                },
                success: function (result) {
                    // $("#Registration_CourseInstallmentId").empty();
                    $("#IsTotalAmountDiscountDiv").show();
                    $("#courseInstallmentDiv").show();
                    $("#Registration_CourseInstallment_Name").val(result.Name);
                    $("#Registration_CourseInstallment_Fee").val(result.Fee);
                    $("#Registration_CourseInstallment_DownPayment").val(result.DownPayment);
                    $("#Registration_CourseInstallment_LumpsumAmount").val(result.LumpsumAmount);
                    $("#Registration_CourseInstallment_NumberOfInstallment").val(result.NumberOfInstallment);

                },
                async: true,
                processData: false
            });
        }
    </script>
}
