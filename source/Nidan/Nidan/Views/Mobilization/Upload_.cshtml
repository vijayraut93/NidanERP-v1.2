@model Nidan.Models.MobilizationViewModel

@{
    ViewBag.Title = "Upload";
}
<div class="row">
    <div class="col-md-12 col-sm-12 col-xs-12">
        <div class="x_panel">
            <div class="x_title">
                <h2>Upload Bulk Mobilizer <small></small></h2>
                <div class="clearfix"></div>
            </div>
            <div class="x_content">
                @using (Html.BeginForm("Upload", "Mobilization", FormMethod.Post, new { encType = "multipart/form-data" }))
                {

                    @Html.AntiForgeryToken()
                    <div class="form-horizontal">
                        @if (ViewContext.ViewData.ModelState.Any(x => x.Key == ""))
                        {
                            <div class="row">
                                <div class="col-md-6 col-sm-12 col-xs-12 col-md-offset-3">
                                    @Html.ValidationSummary(false, null, new { @class = "row alert alert-error" })
                                </div>
                            </div>
                        }
                        <div class="form-group">
                            @Html.LabelFor(model => model.EventId, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                            <div class="col-md-6 col-sm-6 col-xs-12">
                                @Html.DropDownListFor(model => model.EventId, Model.Events, null, new { @class = "form-control col-md-7 col-xs-12" })
                                @Html.ValidationMessageFor(model => model.EventId, "", new { @class = "help-block" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.GeneratedDate, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                            <div class="col-md-6 col-sm-6 col-xs-12 dob">
                                @Html.TextBoxFor(model => model.GeneratedDate, "{0:dd MMMM yyyy}", new { @class = "form-control col-md-7 col-xs-12 generated date" })
                                @Html.ValidationMessageFor(model => model.GeneratedDate, "", new { @class = "help-block" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Files, new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                            <div class="col-md-6 col-sm-6 col-xs-12 dob">
                                @Html.TextBoxFor(model => model.Files, "{0:dd MMMM yyyy}", new { @name = "Files", @type = "file", @class = "form-control col-md-7 col-xs-12" })
                                @Html.ValidationMessageFor(model => model.Files, "", new { @class = "help-block" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="control-label col-md-9 col-sm-3 col-xs-12">
                                <div class="pull-right">
                                    <button type="submit" class="btn btn-success">Submit</button>
                                </div>
                            </div>
                        </div>



                    </div>
                }
            </div>
        </div>
    </div>
</div>
@section scripts {

    <script>
        $(function () {


            //$('.date').daterangepicker({
            //    autoApply: true,
            //    singleDatePicker: true,
            //    showDropdowns: true,
            //    showCustomRangeLabel: false,
            //    opens: 'left',
            //    locale: {
            //        format: 'DD MMMM YYYY'
            //    }
            //});
            //$(".generated .date").on('apply.daterangepicker', function (ev, picker) {
            //    $(this).val(picker.startDate.format('DD MMMM YYYY'));
            //});
            //$('.date').daterangepicker({
            //    singleDatePicker: true,
            //    showDropdowns: true
            //});

            $('#publicHolidayErrorSummary').hide();
            var daterangepickerOptions = {
                autoApply: true,
                singleDatePicker: true,
                showDropdowns: true,
                showCustomRangeLabel: false,
                opens: 'left',
                minDate: moment().subtract('2', 'days').format('DD MMMM YYYY'),
                maxDate: moment().format('DD MMMM YYYY'),
                onSelect: function () {
                    selectedDate = moment().format('DD MMMM YYYY');
                },
                locale: {
                    "format": "DD MMMM YYYY"
                }
            };

            jQuery(function () {
                jQuery(".date").daterangepicker(daterangepickerOptions);
                $('#GeneratedDate').val(moment().format('DD MMMM YYYY'));
                $(".generated .date, .termination .date, .previousemploymentend .date").on('apply.daterangepicker', function (ev, picker) {
                    $(this).val(picker.startDate.format('DD MMMM YYYY'));
                });
                $("#years a").click(function () {
                    var year = $(this).text();
                    var daterangepickerOptionsExtended = {
                        minDate: moment("01/01/" + year).format('DD MMMM YYYY'),
                        maxDate: moment("12/31/" + year).format('DD MMMM YYYY')
                    };
                    jQuery('.date').daterangepicker(jQuery.extend(daterangepickerOptions, daterangepickerOptionsExtended));
                });
            });
        });
    </script>
}